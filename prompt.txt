File: components\AlphyAnimation.tsx
----------------------------------------
'use client';

import { useEffect, useState } from 'react';

export default function AlphyAnimation() {
  const [letters, setLetters] = useState<string[]>([]);

  useEffect(() => {
    // Split the word "Alphy" into individual letters
    const word = 'Alphy'.split('');

    // Animate each letter with a delay
    word.forEach((letter, index) => {
      setTimeout(() => {
        setLetters((prevLetters) => [...prevLetters, letter]);
      }, index * 150); // Reduced delay for faster animation
    });
  }, []);

  return (
        <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-purple-500">
          {letters.map((letter, index) => (
            <span
              key={index}
              className="inline-block animate-bounce-in"
              style={{ animationDelay: `${index * 0.15}s` }}
            >
              {letter}
            </span>
          ))}
        </h1>
  );
}
----------------------------------------

File: components\AnalysisPreview.tsx
----------------------------------------
// components/AnalysisPreview.tsx
'use client';

import { motion } from 'framer-motion';

const bars = [
  { height: 2*40, delay: 0.2 },
  { height: 2*60, delay: 0.4 },
  { height: 2*30, delay: 0.6 },
  { height: 2*80, delay: 0.8 },
  { height: 2*50, delay: 1.0 },
];

export default function AnalysisPreview() {
  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="relative w-full h-full"
    >
      {/* Floating Graph Animation */}
      <div className="absolute inset-0 flex items-end justify-center gap-2">
        {bars.map((bar, index) => (
          <motion.div
            key={index}
            initial={{ height: 0 }}
            animate={{ height: bar.height }}
            transition={{
              duration: 1.5,
              repeat: Infinity,
              repeatType: 'reverse',
              delay: bar.delay,
              ease: "easeInOut",
            }}
            className="w-8 bg-blue-400 rounded-t-lg shadow-lg"
          />
        ))}
      </div>

      {/* Floating Data Points */}
      <motion.div 
        className="absolute top-4 left-4 flex gap-2"
        animate={{ y: [-5, 5, -5] }}
        transition={{ duration: 4, repeat: Infinity }}
      >
        <div className="w-2 h-2 bg-green-400 rounded-full" />
        <div className="w-2 h-2 bg-yellow-400 rounded-full" />
        <div className="w-2 h-2 bg-red-400 rounded-full" />
      </motion.div>

    
    </motion.div>
  );
}
----------------------------------------

File: components\ChatMessage.tsx
----------------------------------------
'use client';

import React, { useState } from 'react';

// 1. ReactMarkdown & plugins
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';       // GitHub-Flavored Markdown
import remarkMath from 'remark-math';     // For math syntax $x^2$
import rehypeKatex from 'rehype-katex';   // For rendering math
import 'katex/dist/katex.min.css';        // KaTeX styles

// 2. Optional Syntax Highlighting
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';

//==========================
// HELPER: parseAIResponse
//==========================
export const parseAIResponse = (content: string) => {
  const thinkingEndIndex = content.indexOf('</think>');
  if (thinkingEndIndex === -1) {
    return { thinking: null, answer: content };
  }

  const thinkingStartIndex = content.indexOf('<think>');
  const thinking = content.slice(thinkingStartIndex + 7, thinkingEndIndex);
  const answer = content.slice(thinkingEndIndex + 8);

  return { thinking, answer };
};

//==========================
// MAIN COMPONENT
//==========================
interface ChatMessageProps {
  role: string;
  content: string;
}

export const ChatMessage: React.FC<ChatMessageProps> = ({ role, content }) => {
  const [showThinking, setShowThinking] = useState(false);

  // Extract the answer vs. hidden <think> text
  const { thinking, answer } = parseAIResponse(content);

  // Decide background colors, text colors, etc.
  const isUser = role === 'user';
  const containerClasses = isUser
    ? 'bg-blue-50 border border-blue-200'
    : 'bg-purple-50 border border-purple-200';

  // Custom renderer for code blocks in Markdown
  const markdownComponents = {
    code({ inline, className, children, ...props }: { inline?: boolean, className?: string, children?: React.ReactNode }) {
      const match = /language-(\w+)/.exec(className || '') || [];
      return !inline ? (
        <SyntaxHighlighter
          language={match[1] || 'text'}
          style={oneDark}
          PreTag="div"
          {...props}
        >
          {String(children).replace(/\n$/, '')}
        </SyntaxHighlighter>
      ) : (
        <code className={className} {...props}>
          {children}
        </code>
      );
    },
  };

  return (
    <div className={`p-4 rounded-lg mb-2 ${containerClasses}`}>
      <div className="flex items-start gap-2">
        <span className={`text-sm font-medium ${isUser ? 'text-blue-600' : 'text-purple-600'}`}>
          {isUser ? 'You:' : 'AI:'}
        </span>

        <div className="flex-1 text-gray-700">
          {/* ANSWER as Markdown */}
          <ReactMarkdown
            remarkPlugins={[remarkGfm, remarkMath]}
            rehypePlugins={[rehypeKatex]}
            components={markdownComponents}
          >
            {answer}
          </ReactMarkdown>

          {thinking && (
            <div className="mt-2">
              <button
                onClick={() => setShowThinking(!showThinking)}
                className="text-sm text-gray-500 hover:text-gray-700 flex items-center gap-1"
              >
                {showThinking ? 'Hide' : 'Show'} Reasoning
                <svg
                  className={`w-4 h-4 transition-transform ${showThinking ? 'rotate-180' : ''}`}
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>

              {showThinking && (
                <div className="mt-2 p-3 bg-gray-100 rounded-lg text-sm text-gray-600">
                  {/* THINKING as Markdown (optional) */}
                  <ReactMarkdown
                    remarkPlugins={[remarkGfm, remarkMath]}
                    rehypePlugins={[rehypeKatex]}
                    components={markdownComponents}
                  >
                    {thinking}
                  </ReactMarkdown>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

----------------------------------------

File: components\CompanyInfoComponent.tsx
----------------------------------------
'use client';
import { CompanyInfo } from '@/app/types';
import React, { useEffect, useState } from 'react';

// Type guard for company data validation
function isCompanyArray(data: any): data is CompanyInfo[] {
  return Array.isArray(data) && data.every(item => 
    typeof item.name === 'string' &&
    (typeof item.sector === 'string' || item.sector === undefined) &&
    (typeof item.years === 'undefined' || Array.isArray(item.years)) &&
    (typeof item.profits === 'undefined' || typeof item.profits === 'object') &&
    (typeof item.assets === 'undefined' || typeof item.assets === 'object')
  );
}

export const CompanyInfoComponent = ({ companies }: { companies: any }) => {
  const [error, setError] = useState<string | null>(null);
  const [validatedCompanies, setValidatedCompanies] = useState<CompanyInfo[]>([]);

  useEffect(() => {
    if (!companies) {
      setError('No company data provided');
      setValidatedCompanies([]);
      return;
    }

    if (!isCompanyArray(companies)) {
      setError('Invalid company data format');
      setValidatedCompanies([]);
      return;
    }

    setError(null);
    setValidatedCompanies(companies);
  }, [companies]);

  if (error) {
    return (
      <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-md">
        <h3 className="text-red-600 font-medium">Data Error</h3>
        <p className="text-red-500 text-sm">{error}</p>
      </div>
    );
  }

  if (validatedCompanies.length === 0) return null;

  return (
    <div className="mt-8 border-t pt-6">
      <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
        <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm mr-2">
          Company Data
        </span>
        Extracted Information
      </h4>
      <div className="bg-white rounded-lg border border-gray-200 overflow-hidden text-gray-800">
        {validatedCompanies.map((company, index) => (
          <div key={index} className="p-4 border-b last:border-b-0">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h3 className="font-medium text-gray-900">{company.name}</h3>
                {company.sector && <p className="text-sm text-gray-600">{company.sector}</p>}
              </div>
              {company.years && company.years.length > 0 && (
                <div className="col-span-2">
                  <div className="grid grid-cols-4 gap-4 text-sm">
                    <div className="font-medium">Year</div>
                    <div className="font-medium">Profits</div>
                    <div className="font-medium">Assets</div>
                    <div className="font-medium"> EBITDA </div>
                    {company.years.map((year, yearIndex) => (
                      <React.Fragment key={yearIndex}>
                        <div className="text-gray-600">{year}</div>
                        <div className="text-gray-600">
                          {company.profits?.[year] || 'N/A'}
                        </div>
                        <div className="text-gray-600">
                          {company.assets?.[year] || 'N/A'}
                        </div>
                        <div className="text-gray-600">
                          {company.ebitda?.[year] || 'N/A'}
                        </div>
                      </React.Fragment>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
----------------------------------------

File: components\CompanySearch.tsx
----------------------------------------
import { useEffect, useState } from 'react';

interface Company {
  cik: string;
  name: string;
  tickers: string[];
}

export default function CompanySearch() {
  const [searchTerm, setSearchTerm] = useState('');
  const [companies, setCompanies] = useState<Company[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch both datasets in parallel
        const [namesRes, tickersRes] = await Promise.all([
          fetch('https://03ac-194-214-160-21.ngrok-free.app/cik_names?api_token=t3stt%40ken'),
          fetch('https://03ac-194-214-160-21.ngrok-free.app/cik_tickers?api_token=t3stt%40ken')
        ]);

        const namesData: Record<string, string> = await namesRes.json();
        const tickersData: Record<string, string[]> = await tickersRes.json();

        // Merge the datasets
        const mergedCompanies = Object.entries(tickersData).map(([cikWithZeros, tickers]) => {
          // Remove leading zeros from CIK
          const cik = parseInt(cikWithZeros, 10).toString();
          return {
            cik,
            name: namesData[cik] || 'Unknown Company',
            tickers
          };
        });

        setCompanies(mergedCompanies);
        setLoading(false);
      } catch {
        setError('Failed to load company data');
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const filteredCompanies = companies.filter(company => {
    const searchLower = searchTerm.toLowerCase();
    return (
      company.name.toLowerCase().includes(searchLower) ||
      company.tickers.some(ticker => ticker.toLowerCase().includes(searchLower)) ||
      company.cik.includes(searchTerm)
    );
  });

  if (loading) return <div className="p-4 text-gray-500">Loading company data...</div>;
  if (error) return <div className="p-4 text-red-500">{error}</div>;

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Company Search</h1>
      
      <input
        type="text"
        placeholder="Search by company name, ticker, or CIK..."
        className="w-full p-2 border rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />

      <div className="space-y-2">
        {filteredCompanies.slice(0, 10).map(company => (
          <div
            key={company.cik}
            className="p-4 border rounded-lg hover:bg-gray-50 transition-colors"
          >
            <div className="flex justify-between items-start">
              <div>
                <h3 className="font-semibold">{company.name}</h3>
                <p className="text-gray-600 text-sm">CIK: {company.cik}</p>
              </div>
              <div className="flex flex-wrap gap-2">
                {company.tickers.map(ticker => (
                  <span
                    key={ticker}
                    className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
                  >
                    {ticker}
                  </span>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>

      {filteredCompanies.length === 0 && searchTerm && (
        <div className="text-gray-500 text-center py-4">
          No companies found matching `{searchTerm}`
        </div>
      )}
    </div>
  );
}
----------------------------------------

File: components\ExtractedTextComponent.tsx
----------------------------------------
'use client';

import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';       // for GitHub-Flavored Markdown
import remarkMath from 'remark-math';     // for LaTeX math
import rehypeKatex from 'rehype-katex';   // to render LaTeX using KaTeX
import 'katex/dist/katex.min.css';        // KaTeX CSS

// Optional: If you want code syntax highlighting, you could import:
// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
// import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';

interface ExtractedTextProps {
  content: string;
}

export const ExtractedTextContent: React.FC<ExtractedTextProps> = ({ content }) => {
  // If you also want custom rendering for code blocks, you can define components like so:
  /*
  const markdownComponents = {
    code({ node, inline, className, children, ...props }) {
      const match = /language-(\w+)/.exec(className || '') || [];
      return !inline ? (
        <SyntaxHighlighter
          language={match[1] || 'text'}
          style={oneDark}
          PreTag="div"
          {...props}
        >
          {String(children).replace(/\n$/, '')}
        </SyntaxHighlighter>
      ) : (
        <code className={className} {...props}>
          {children}
        </code>
      );
    },
  };
  */

  return (
    <div className="prose max-w-none text-gray-800">
      <ReactMarkdown
        remarkPlugins={[remarkGfm, remarkMath]}
        rehypePlugins={[rehypeKatex]}
        // components={markdownComponents} // only if you want code highlighting
      >
        {content}
      </ReactMarkdown>
    </div>
  );
};

----------------------------------------

File: components\FileTree.tsx
----------------------------------------
'use client';

import { useState } from 'react';
import { FolderIcon, FolderOpenIcon, DocumentIcon } from '@heroicons/react/24/outline';

export interface FileNode {
  name: string;
  type: 'file' | 'folder';
  children?: FileNode[];
  content?: string;
  rawData?: ArrayBuffer;
  fullPath?: string;
  highlighted?: boolean;
  selected?: boolean;
  base64Data?: string;
  mimeType?: string;
  localPath?: string;
}

interface FileTreeProps {
  nodes: FileNode[];
  selectedFile?: FileNode | null;
  onSelect: (node: FileNode) => void;
  onToggleConversion?: (path: string) => void;
  onToggleHighlight?: (path: string) => void;
}

interface TreeNodeProps {
  node: FileNode;
  onSelect: (node: FileNode) => void;
  isSelected: boolean;
  selectedFile?: FileNode | null;
  onToggleConversion?: (path: string) => void;
  onToggleHighlight?: (path: string) => void;
}

export default function FileTree({
  nodes,
  onSelect,
  selectedFile,
  onToggleConversion,
  onToggleHighlight,
}: FileTreeProps) {
  return (
    <div className="pl-4">
      {nodes.map((node, index) => (
        <TreeNode
          key={index}
          node={node}
          onSelect={onSelect}
          isSelected={selectedFile?.name === node.name}
          selectedFile={selectedFile}
          onToggleConversion={onToggleConversion}
          onToggleHighlight={onToggleHighlight}
        />
      ))}
    </div>
  );
}

function TreeNode({
  node,
  onSelect,
  isSelected,
  selectedFile,
  onToggleConversion,
  onToggleHighlight,
}: TreeNodeProps) {
  const [isOpen, setIsOpen] = useState(false);

  const handleClick = () => {
    if (node.type === 'file') {
      onSelect(node);
    } else {
      setIsOpen(!isOpen);
    }
  };

  const handleDoubleClick = () => {
    // If it's a file and we have a highlight function, call it
    if (node.type === 'file' && onToggleHighlight) {
      onToggleHighlight(node.fullPath!);
    }
  };

  return (
    <div className="pl-4">
      <div className="flex items-center gap-2">
        {/* Conversion Checkbox: only for files */}
        {node.type === 'file' && (
         <input
         type="checkbox"
         checked={node.selected ?? true} // Default to true
         onChange={(e) => {
           e.stopPropagation();
           onToggleConversion?.(node.fullPath!);
         }}
         className="w-4 h-4 accent-blue-600 cursor-pointer"
       />
        )}

        <button
          onClick={handleClick}
          onDoubleClick={handleDoubleClick}
          className={`flex items-center gap-2 py-2 w-full text-left rounded-md px-2 transition-colors ${
            node.highlighted ? 'ring-2 ring-blue-500 bg-blue-50 shadow-md' : ''
          } ${
            isSelected ? 'bg-blue-50 text-blue-700 border border-blue-200' : 'hover:bg-gray-50'
          }
          ${node.selected ? '' : 'opacity-50 grayscale'}`
          }
        >
          {/*{!node.selected && (
              <span className="text-xs text-gray-500 ml-2">(Excluded from analysis)</span>
            )} */}

          {/* Exclude from analysis, if not selected, and if its not a folder */}
          {!node.selected && node.type === 'file' && (
            <span className="text-xs text-gray-500 ml-2">Excluded from analysis</span>
          )}

          {/* File/Folder Icon */} 

          <span className="w-5 h-5 flex-shrink-0">
            {node.type === 'folder' ? (
              isOpen ? (
                <FolderOpenIcon className="w-5 h-5 text-blue-600" />
              ) : (
                <FolderIcon className="w-5 h-5 text-blue-600" />
              )
            ) : (
              <DocumentIcon className="w-5 h-5 text-gray-500" />
            )}
          </span>

          {/* File/Folder Name */}
          <span
            className={`text-sm ${
              node.type === 'folder' ? 'font-medium text-gray-900' : 'text-gray-700'
            }`}
          >
            {node.name}
          </span>
        </button>
      </div>

      {/* Render child nodes if folder is open */}
      {isOpen && node.children && (
        <div className="pl-4 border-l-2 border-gray-200 ml-3">
          <FileTree
            nodes={node.children}
            onSelect={onSelect}
            selectedFile={selectedFile}
            onToggleConversion={onToggleConversion}
            onToggleHighlight={onToggleHighlight}
          />
        </div>
      )}
    </div>
  );
}

----------------------------------------

File: components\FileUploader.tsx
----------------------------------------
'use client';

import { useCallback } from 'react';

export default function FileUploader({
  onUpload
}: {
  onUpload: (files: File[]) => void;
}) {
  const handleFileChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const files = Array.from(e.target.files || []);
      if (files.length > 0) {
        onUpload(files);
      }
    },
    [onUpload]
  );

  return (
    <div className="border-2 border-dashed border-gray-300 p-4 rounded-lg">
      <input
        type="file"
        multiple
        onChange={handleFileChange}
        className="block w-full text-sm text-gray-500
          file:mr-4 file:py-2 file:px-4
          file:rounded-full file:border-0
          file:text-sm file:font-semibold
          file:bg-blue-50 file:text-blue-700
          hover:file:bg-blue-100"
      />
      <p className="mt-2 text-sm text-gray-600">
        Supported formats: PDF, Excel, Word
      </p>
    </div>
  );
}
----------------------------------------

File: components\Footer.tsx
----------------------------------------
'use client';

import Link from 'next/link';
import { FaFacebook, FaTwitter, FaInstagram, FaLinkedin } from 'react-icons/fa';

export default function Footer() {
  return (
    <footer className="bg-gray-100 text-gray-600">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Main Footer Content */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center space-y-6 md:space-y-0">
          {/* Company Info */}
          <div className="flex flex-col space-y-2">
            <p className="text-sm font-semibold">© 2023 AlphaGen SARSL. All rights reserved.</p>
            <p className="text-xs">
              Based in Luxembourg | License #12345
            </p>
          </div>

          {/* Navigation Links */}
          <nav className="flex flex-col space-y-2">
            <h3 className="text-sm font-semibold mb-2">Quick Links</h3>
            <Link href="/about" className="text-xs hover:text-gray-900 transition-colors">
              About Us
            </Link>
            <Link href="/services" className="text-xs hover:text-gray-900 transition-colors">
              Our Services
            </Link>
            <Link href="/contact" className="text-xs hover:text-gray-900 transition-colors">
              Contact Us
            </Link>
            <Link href="/privacy-policy" className="text-xs hover:text-gray-900 transition-colors">
              Privacy Policy
            </Link>
          </nav>

          {/* Social Media Links */}
          <div className="flex flex-col space-y-2">
            <h3 className="text-sm font-semibold mb-2">Follow Us</h3>
            <div className="flex space-x-4">
              <a
                href="https://facebook.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-600 hover:text-gray-900 transition-colors"
              >
                <FaFacebook size={20} />
              </a>
              <a
                href="https://twitter.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-600 hover:text-gray-900 transition-colors"
              >
                <FaTwitter size={20} />
              </a>
              <a
                href="https://instagram.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-600 hover:text-gray-900 transition-colors"
              >
                <FaInstagram size={20} />
              </a>
              <a
                href="https://linkedin.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-600 hover:text-gray-900 transition-colors"
              >
                <FaLinkedin size={20} />
              </a>
            </div>
          </div>
        </div>

        {/* Bottom Line */}
        <div className="border-t border-gray-300 mt-6 pt-4 text-xs text-center">
          <p>
            Designed and built with ❤️ by{' '}
            <a
              href="https://yourcompany.com"
              target="_blank"
              rel="noopener noreferrer"
              className="underline hover:text-gray-900 transition-colors"
            >
              AlphaGen
            </a>
          </p>
        </div>
      </div>
    </footer>
  );
}
----------------------------------------

File: components\Navbar.tsx
----------------------------------------
'use client';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { UserCircleIcon, Cog6ToothIcon } from '@heroicons/react/24/outline';
import AlphyAnimation from '@/components/AlphyAnimation';

export default function Navbar() {
  const [sessionId, setSessionId] = useState<string | null>(null); // Initialize as null
  const [loggedIn, setLoggedIn] = useState(false);
  const [userEmail, setUserEmail] = useState('');
  const router = useRouter();

  useEffect(() => {
    // Client-side only code
    if (typeof window !== 'undefined') {
      const storedSessionId = localStorage.getItem('currentSessionId');
      setSessionId(storedSessionId);

      const isLogged = localStorage.getItem('loggedIn') === 'true';
      setLoggedIn(isLogged);
      if (isLogged) {
        setUserEmail(localStorage.getItem('userEmail') || '');
      } else {
        localStorage.removeItem('userEmail');
        localStorage.removeItem('userId');
      }
    }
  }, []); // Empty dependency array ensures this runs once on mount

  const handleLogout = () => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('loggedIn');
      localStorage.removeItem('userEmail');
      localStorage.removeItem('userId');
      localStorage.removeItem('currentSessionId'); // Clear session ID on logout
    }
    setLoggedIn(false);
    router.push('/login');
  };

  return (
    <nav className="bg-white shadow">
      <div className="max-w-7xl mx-auto px-4 py-3 flex items-center justify-between">
        <Link href="/">
          <span className="text-gray-900 hover:text-blue-800 transition-colors font-bold text-xl">Alphy</span>
        </Link>
        <div className="flex items-center space-x-4">
          {loggedIn ? (
            <>
              <Link href="/dashboard">
                <span className="text-gray-700 hover:text-blue-600 transition-colors">Dashboard</span>
              </Link>
              <Link href="/history">
                <span className="text-gray-700 hover:text-blue-600 transition-colors">History</span>
              </Link>
              <Link 
                href={sessionId ? `/companies?sessionId=${sessionId}` : '/companies'}
                className="text-gray-700 hover:text-gray-900"
              >
                Companies
              </Link>
              <Link href="/settings" title="Settings">
                <Cog6ToothIcon className="w-8 h-8 text-blue-600 cursor-pointer" />
              </Link>
              <div className="flex items-center space-x-2">
                <UserCircleIcon className="w-8 h-8 text-blue-600" />
                <span className="text-gray-700">{userEmail}</span>
              </div>
              <button
                onClick={handleLogout}
                className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition-colors"
              >
                Log Out
              </button>
            </>
          ) : (
            <Link href="/login">
              <button className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition-colors">
                Log In
              </button>
            </Link>
          )}
        </div>
      </div>
    </nav>
  );
}
----------------------------------------

File: components\SummaryContent.tsx
----------------------------------------
'use client';

import React, { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';       


// If you also want syntax highlighting for code blocks:
// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
// import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';

const parseAIResponse = (content: string) => {
  const thinkingEndIndex = content.indexOf('</think>');
  if (thinkingEndIndex === -1) {
    return { thinking: null, answer: content.trim() };
  }
  const thinkingStartIndex = content.indexOf('<think>');
  const thinking = content.slice(thinkingStartIndex + 7, thinkingEndIndex).trim();
  const answer = content.slice(thinkingEndIndex + 8).trim();
  return { thinking, answer };
};

interface SummaryContentProps {
  content: string;
}

export const SummaryContent: React.FC<SummaryContentProps> = ({ content }) => {
  const [showThinking, setShowThinking] = useState(false);
  const { thinking, answer } = parseAIResponse(content);

  // Optionally define custom renderers for code blocks, etc.
  // const markdownComponents = {
  //   code({ node, inline, className, children, ...props }) {
  //     const match = /language-(\w+)/.exec(className || '') || [];
  //     return !inline ? (
  //       <SyntaxHighlighter
  //         language={match[1] || 'text'}
  //         style={oneDark}
  //         PreTag="div"
  //         {...props}
  //       >
  //         {String(children).replace(/\n$/, '')}
  //       </SyntaxHighlighter>
  //     ) : (
  //       <code className={className} {...props}>
  //         {children}
  //       </code>
  //     );
  //   },
  // };

  return (
    <div className="prose max-w-none text-gray-700">
      {/* ANSWER as Markdown */}
      <ReactMarkdown remarkPlugins={[remarkGfm]}>
      
        {answer}
      </ReactMarkdown>

      {thinking && (
        <div className="mt-2">
          <button
            onClick={() => setShowThinking((prev) => !prev)}
            className="text-sm text-green-600 hover:text-green-700 flex items-center gap-1"
          >
            {showThinking ? 'Hide' : 'Show'} Reasoning
            <svg
              className={`w-4 h-4 transition-transform ${showThinking ? 'rotate-180' : ''}`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          {showThinking && (
            <div className="mt-2 p-3 bg-green-100 rounded-lg text-sm text-green-700 justify-center">
              {/* THINKING as Markdown */}
              <ReactMarkdown remarkPlugins={[remarkGfm]}>
                {thinking}
              </ReactMarkdown>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

----------------------------------------

File: components\TestimonialsSlider.tsx
----------------------------------------
'use client';
import React from 'react';
import dynamic from 'next/dynamic';

// Dynamically import react-slick so it only runs client-side
const Slider = dynamic(() => import('react-slick'), { ssr: false });

// Import the slick CSS in the client component
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';

// Optional: custom arrow components
function NextArrow({ onClick }: { onClick?: () => void }) {
  return (
    <button
      onClick={onClick}
      className="absolute right-4 bottom-4 z-10 bg-black/50 hover:bg-black/70 text-white
                 p-3 rounded-full focus:outline-none transition"
      aria-label="Next"
    >
      {/* Simple SVG Arrow */}
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="h-5 w-5 transform rotate-[-90deg]"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path fillRule="evenodd" d="M9.293 15.707a1 1 0 010-1.414L12.586 11H3a1 1 0 110-2h9.586L9.293 5.707a1 1 0 111.414-1.414l4.999 4.999a1 1 0 010 1.414l-4.999 4.999a1 1 0 01-1.414 0z" clipRule="evenodd" />
      </svg>
    </button>
  );
}

function PrevArrow({ onClick }: { onClick?: () => void }) {
  return (
    <button
      onClick={onClick}
      className="absolute left-4 bottom-4 z-10 bg-black/50 hover:bg-black/70 text-white
                 p-3 rounded-full focus:outline-none transition"
      aria-label="Previous"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="h-5 w-5 transform rotate-90"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path fillRule="evenodd" d="M9.293 15.707a1 1 0 010-1.414L12.586 11H3a1 1 0 110-2h9.586L9.293 5.707a1 1 0 111.414-1.414l4.999 4.999a1 1 0 010 1.414l-4.999 4.999a1 1 0 01-1.414 0z" clipRule="evenodd" />
      </svg>
    </button>
  );
}

export default function TestimonialsSlider() {
  // Carousel settings
  const settings = {
    dots: true,
    infinite: true,
    speed: 600,
    fade: false, // crossfade effect
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 5000,
    pauseOnHover: true,
    // enable arrow buttons
    arrows: true,
    nextArrow: <NextArrow />,
    prevArrow: <PrevArrow />,
  };

  // Example data for each testimonial
  const testimonials = [
    {
      name: 'Sarah L.',
      role: 'Investment Analyst',
      quote: `This platform has completely transformed how we approach due diligence.
              The AI insights are unparalleled!`,
      image: '/images/testimonial-1.jpg', // replace with a real image path
    },
    {
      name: 'James K.',
      role: 'Portfolio Manager',
      quote: `We’ve saved countless hours thanks to the automated document processing.
              Highly recommend it!`,
      image: '/images/testimonial-2.jpg',
    },
    {
      name: 'Emily T.',
      role: 'Managing Director',
      quote: `The support team is amazing, and the platform is intuitive. 
              It’s been a game-changer for our firm.`,
      image: '/images/testimonial-3.jpg',
    },
  ];

  return (
    <Slider {...settings} className="relative">
      {testimonials.map((item, idx) => (
        <div
          key={idx}
          className="flex items-center justify-center min-h-[400px] md:min-h-[500px]
                     bg-cover bg-center bg-no-repeat
                     text-white relative"
          style={{ backgroundImage: `url(${item.image})` }}
        >
          {/* Overlay */}
          <div className="absolute inset-0 bg-black bg-opacity-20" />

          {/* Content */}
          <div className="relative z-10 max-w-2xl mx-4 p-6 
                          rounded-lg animate-fadeInUp
                          bg-black/50 md:bg-transparent 
                          md:backdrop-blur-sm
                          text-center md:text-left">
            <blockquote className="italic text-lg md:text-xl mb-4">
              &ldquo;{item.quote}&rdquo;
            </blockquote>
            <p className="font-semibold text-sm md:text-base">
              — {item.name}, {item.role}
            </p>
          </div>
        </div>

      ))}
    </Slider>
  );
}

----------------------------------------

File: components\dashboard\ChatSection.tsx
----------------------------------------
import React, { FormEvent, RefObject } from 'react';
import { ChatMessage } from '@/components/ChatMessage';

interface ChatSectionProps {
  chatHistory: Array<{ role: string; content: string }>;
  formRef: React.RefObject<HTMLFormElement | null>;
  handleChatSubmit: (params: { e: React.FormEvent<HTMLFormElement>; selectedFileText: string; globalContext: string; model: string; }) => Promise<void>;
  extractedTexts: Record<string, string>;
  selectedFile?: { fullPath?: string } | null;
  highlightedFiles: Set<string>;
  chatMessage: string;
  setChatMessage: (message: string) => void;
  isChatLoading: boolean;
  selectedModel: string;
}

const ChatSection: React.FC<ChatSectionProps> = ({
  chatHistory,
  formRef,
  handleChatSubmit,
  extractedTexts,
  selectedFile,
  highlightedFiles,
  chatMessage,
  setChatMessage,
  isChatLoading,
  selectedModel
}) => {
  return (
    <div className="mt-8 border-t pt-6">
      <h3 className="text-lg font-semibold mb-4 flex items-center text-gray-900">
        <span className="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm mr-2">
          Ask Me Anything
        </span>
        About This File
      </h3>
      <div className="space-y-4 mb-6 max-h-96 overflow-y-auto">
        {chatHistory.map((msg, idx) => (
          <ChatMessage key={idx} role={msg.role} content={msg.content} />
        ))}
      </div>
      <form
        ref={formRef}
        onSubmit={(e) =>
          handleChatSubmit({
            e,
            selectedFileText: extractedTexts[selectedFile?.fullPath || ''],
            globalContext: Array.from(highlightedFiles)
              .map((path) => extractedTexts[path])
              .join('\n\n'),
            model: selectedModel
          })
        }
        className="flex gap-2 text-gray-600"
      >
        <textarea
          value={chatMessage}
          onChange={(e) => setChatMessage(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault();
              formRef.current?.requestSubmit();
            }
          }}
          className="flex-1 p-2 border rounded-lg"
          placeholder="Ask a question about this file..."
          rows={2}
          disabled={isChatLoading}
        />
        <button
          type="submit"
          className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 disabled:opacity-50"
          disabled={isChatLoading}
        >
          {isChatLoading ? 'Sending...' : 'Ask'}
        </button>
      </form>
    </div>
  );
};

export default ChatSection;
----------------------------------------

File: components\dashboard\FileAnalysisProgress.tsx
----------------------------------------
import React from "react";

type FileAnalysisButtonsProps = {
  fileTree: any[];
  summarizationModel: string;
  infoRetrievalModel: string;
  consolidationModel: string;
  runSummarization: boolean;
  runInfoRetrieval: boolean;
  analyzeFiles: (params: {
    runSummarization: boolean;
    runInfoRetrieval: boolean;
    summarizationModel: string;
    infoRetrievalModel: string;
  }) => void;
  openSaveModal: () => void;
  toggleAllFiles: (state: boolean) => void;
  allSelected: boolean;
  setAllSelected: (state: boolean) => void;
  getAllFiles: (files: any[]) => any[];
  isAnalyzing: boolean;
  progress: number;
  processingPhase: string;
  processedFiles: number;
  totalFiles: number;
};

const FileAnalysisButtons: React.FC<FileAnalysisButtonsProps> = ({
  fileTree,
  summarizationModel,
  infoRetrievalModel,
  consolidationModel,
  runSummarization,
  runInfoRetrieval,
  analyzeFiles,
  openSaveModal,
  toggleAllFiles,
  allSelected,
  setAllSelected,
  getAllFiles,
  isAnalyzing,
  progress,
  processingPhase,
  processedFiles,
  totalFiles,
}) => {
  if (fileTree.length === 0) return null;

  return (
    <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
      <div className="mb-4 flex items-center justify-between">
        <div className="flex items-center space-x-3">
        <button
          onClick={() => analyzeFiles({
            runSummarization,
            runInfoRetrieval,
            summarizationModel,
            infoRetrievalModel
          })} // Changed from () => analyzeFiles(...)
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
          disabled={isAnalyzing}
        >
          {isAnalyzing ? "Analyzing..." : "Analyze Files"}
        </button>
          <button
            onClick={openSaveModal}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition-colors"
          >
            Save Progress
          </button>
        </div>
        <div className="flex items-center space-x-4">
          <button
            onClick={() => {
              toggleAllFiles(!allSelected);
              setAllSelected(!allSelected);
            }}
            className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 transition-colors"
          >
            {allSelected ? "Deselect All" : "Select All"}
          </button>
          <span className="text-sm text-gray-600">
            {getAllFiles(fileTree).filter((f) => f.selected).length} files selected
          </span>
        </div>
        {isAnalyzing && (
          <div className="flex flex-col items-end space-y-2 ml-4">
            <div className="w-64 bg-gray-200 rounded-full h-2.5">
              <div
                className="bg-blue-600 h-2.5 rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              />
            </div>
            <span className="text-sm text-gray-600">
              {processingPhase === "extracting" &&
                `Converting files to text: ${processedFiles}/${totalFiles} (${progress}%)`}
              {processingPhase === "summarizing" &&
                `Summarizing files: ${processedFiles}/${totalFiles} (${progress}%)`}
              {processingPhase === "extracting_companies" &&
                `Extracting company data: ${processedFiles}/${totalFiles} (${progress}%)`}
            </span>
          </div>
        )}
      </div>
    </div>
  );
};

export default FileAnalysisButtons;

----------------------------------------

File: components\dashboard\FilePreviewSection.tsx
----------------------------------------
import { InformationCircleIcon } from '@heroicons/react/24/outline';
import { Dispatch, SetStateAction, useState } from 'react';
import { CompanyInfoComponent } from '@/components/CompanyInfoComponent';
import { ExtractedTextContent } from '@/components/ExtractedTextComponent';
import { SummaryContent } from '@/components/SummaryContent';

interface FileType {
  name: string;
  fullPath?: string;
  content?: string;
  type: 'file' | 'folder';
}

interface SelectedFilePanelProps {
  selectedFile: FileType;
  extractedTexts: Record<string, string>;
  extractedCompanies: Record<string, any[]>;
  summaries: Record<string, string>;
  showExtracted: boolean;
  setShowExtracted: Dispatch<SetStateAction<boolean>>;
  rawResponses: Record<string, { prompt: string; response: string }>;
}

const SelectedFilePanel = ({
  selectedFile,
  extractedTexts,
  extractedCompanies,
  summaries,
  showExtracted,
  setShowExtracted,
  rawResponses
}: SelectedFilePanelProps) => {
  const fileKey = selectedFile.fullPath || '';
  const [showRawResponse, setShowRawResponse] = useState(false);
  const fullPath = selectedFile.fullPath || '';

  return (
    <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold text-gray-900">
          {selectedFile.name}
          <span className="text-sm text-gray-500 ml-2">
            ({selectedFile.type === 'file' ? 'File' : 'Folder'})
          </span>
        </h3>
        <div className="flex gap-2">
        
          {extractedCompanies[fullPath] && (
            <button
              onClick={() => setShowRawResponse(!showRawResponse)}
              className="px-3 py-1 text-sm bg-gray-100 text-gray-800 rounded-md hover:bg-gray-200"
            >
              {showRawResponse ? 'Hide Raw' : 'Show Raw'}
            </button>
          )}
        </div>
      </div>

      {/* Always show file preview */}
      <div className="mb-6 border rounded-md overflow-hidden">
        {selectedFile.content && (
          <iframe
            src={selectedFile.content}
            className="w-full h-96"
            title="File Preview"
          />
        )}
      </div>

      {/* Raw response toggleable section */}
      {showRawResponse && (
        <div className="mt-4 p-4 bg-gray-50 rounded-md border border-gray-200">
          <h4 className="text-sm font-medium mb-2 text-gray-700">Raw LLM Response</h4>
          <pre className="text-xs whitespace-pre-wrap break-words text-gray-600">
            {rawResponses[fullPath]?.response || 'No raw response available'}
          </pre>
        </div>
      )}

      {/* Extracted content sections */}
     
          {/* Extracted Text */}
         
          {showRawResponse && extractedTexts[fileKey] && (
            <div className="mt-6">
              <div className="flex items-center justify-between mb-3">
                <h4 className="text-sm font-medium text-gray-700">Extracted Text</h4>
              </div>
              <div className="border p-3 rounded bg-gray-50 text-sm text-gray-600">
                <ExtractedTextContent content={extractedTexts[fileKey]} />
              </div>
            </div>
          )}
         

          {/* Extracted Companies */}
          {/*
          {extractedCompanies[fileKey]?.length > 0 && (
            <div className="mt-6 border-t pt-6">
              <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm mr-2">
                  Companies
                </span>
                Extracted Entities
              </h4>
              <CompanyInfoComponent companies={extractedCompanies[fileKey]} />
            </div>
            
          )}
          */}

          {/* Summaries */}
          {summaries[fileKey] && (
            <div className="mt-6 border-t pt-6">
              <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm mr-2">
                  AI Summary
                </span>
                Key Insights
              </h4>
              <div className="bg-green-50 rounded-lg p-4 border border-green-200">
                <SummaryContent content={summaries[fileKey]} />
                <div className="mt-4 flex items-center text-sm text-green-700">
                  <InformationCircleIcon className="w-4 h-4 mr-1" />
                  Summary generated by AI - verify against original documents
                </div>
              </div>
            </div>
          )}
       
    </div>
  );
};

export default SelectedFilePanel;
----------------------------------------

File: components\dashboard\FileUploadArea.tsx
----------------------------------------
import { useDropzone } from 'react-dropzone';

export default function FileUploadArea({
  processZip,
  processFolder,
  handleLoadClick,
  isDragActive
}: {
  processZip: (file: File) => Promise<void>;
  processFolder: (files: FileList) => Promise<void>;
  handleLoadClick: () => void;
  isDragActive: boolean;
}) {
  const { getRootProps, getInputProps } = useDropzone({
    onDrop: (acceptedFiles) => {
      const zipFile = acceptedFiles.find((file) => file.name.endsWith('.zip'));
      if (zipFile) processZip(zipFile);
    },
    accept: { 'application/zip': ['.zip'] },
    multiple: false
  });

  return (
    <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
      <div
        {...getRootProps()}
        className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer ${
          isDragActive ? 'border-blue-600 bg-blue-50' : 'border-gray-300'
        }`}
      >
        <input {...getInputProps()} />
        <p className="text-gray-600">
          {isDragActive ? 'Drop ZIP file here' : 'Drag and drop a ZIP file or click to select'}
        </p>
      </div>
      <div className="mt-4 flex flex-col gap-2 sm:flex-row sm:items-center sm:gap-4">
        <div className="flex gap-2">
          <input
            type="file"
            id="folder-upload"
            ref={(input) => {
              if (input) input.webkitdirectory = true;
            }}
            onChange={(e) => e.target.files && processFolder(e.target.files)}
            className="hidden"
          />
          <button
            onClick={() => document.getElementById('folder-upload')?.click()}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
          >
            Upload Folder
          </button>
          <button
            onClick={handleLoadClick}
            className="bg-gray-700 text-white px-4 py-2 rounded hover:bg-gray-800 transition-colors"
          >
            Load Progress
          </button>
        </div>
        <small className="text-gray-500">
          Your browser may show a brief warning when uploading a folder. This is normal.
        </small>
      </div>
    </div>
  );
}
----------------------------------------

File: components\dashboard\LoadSessionModal.tsx
----------------------------------------
import React from 'react';

interface SessionSummary {
  session_id: number;
  session_name: string;
  created_at: string;
}

interface LoadModalProps {
  showLoadModal: boolean;
  availableSessions: SessionSummary[];
  confirmLoadSession: (sessionId: string) => void;
  setShowLoadModal: (show: boolean) => void;
}

const LoadModal: React.FC<LoadModalProps> = ({
  showLoadModal,
  availableSessions,
  confirmLoadSession,
  setShowLoadModal
}) => {
  if (!showLoadModal) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white p-6 rounded-lg max-w-md w-full">
        <h3 className="text-xl font-bold mb-4 text-gray-800">Select Session</h3>
        {availableSessions.map(session => (
          <div 
            key={session.session_id}
            className="p-3 hover:bg-gray-100 cursor-pointer text-gray-600"
            onClick={() => confirmLoadSession(session.session_id.toString())}
          >
            <p>{session.session_name}</p>
            <small>{new Date(session.created_at).toLocaleDateString()}</small>
          </div>
        ))}
        <button onClick={() => setShowLoadModal(false)} className="mt-4 text-gray-800">
          Go Back
        </button>
      </div>
    </div>
  );
};

export default LoadModal;
----------------------------------------

File: components\dashboard\ModelSelector.tsx
----------------------------------------
import { useState } from 'react';

export default function ModelSelector({
  selectedModel,
  onModelChange,
  disabled
}: {
  selectedModel: string;
  onModelChange: (model: string) => void;
  disabled?: boolean;
}) {
  const models = [
    'deepseek:deepseek-reasoner',
    'deepseek:deepseek-chat',
  ]
  return (
    <select
      value={selectedModel}
      onChange={(e) => onModelChange(e.target.value)}
      disabled={disabled}
      className={`w-full p-2 border rounded ${disabled ? 'bg-gray-100' : ''}`}
    >
      {models.map((model) => (
        <option key={model} value={model}>
          {model.split(':')[1]}
        </option>
      ))}
    </select>
  )
}
----------------------------------------

File: components\dashboard\RadioButtons.tsx
----------------------------------------
import React, { useState } from 'react';
import { FileNode } from '@/components/FileTree';

interface ChatContextRadioButtonsProps {
    fileTree: FileNode[];
    getAllFiles: (files: FileNode[]) => FileNode[];
  }

const ChatContextRadioButtons: React.FC<ChatContextRadioButtonsProps> = ({ fileTree, getAllFiles }) => {
  const [contextType, setContextType] = useState<'none' | 'local' | 'global'>('none');

  return (
    <div className="mb-4 flex items-center gap-4">
      <div className="flex items-center gap-2">
        <label className="flex items-center gap-1 text-sm font-medium text-gray-700">
          <input
            type="radio"
            checked={contextType === 'none'}
            onChange={() => setContextType('none')}
            className="w-4 h-4"
          />
          <span className="flex items-center gap-1">
            No Context
            <span className="text-gray-500 text-xs">(Question only)</span>
          </span>
        </label>
        <label className="flex items-center gap-1 text-sm font-medium text-gray-700">
          <input
            type="radio"
            checked={contextType === 'local'}
            onChange={() => setContextType('local')}
            className="w-4 h-4"
          />
          <span className="flex items-center gap-1">
            Local Context
            <span className="text-gray-500 text-xs">(Current file only)</span>
          </span>
        </label>
        <label className="flex items-center gap-1 text-sm font-medium text-gray-700 ml-4">
          <input
            type="radio"
            checked={contextType === 'global'}
            onChange={() => setContextType('global')}
            className="w-4 h-4"
          />
          <span className="flex items-center gap-1">
            Global Context
            <span className="text-gray-500 text-xs">
              ({getAllFiles(fileTree).filter((f) => f.selected).length} files selected)
            </span>
          </span>
        </label>
      </div>
    </div>
  );
};

export default ChatContextRadioButtons;

----------------------------------------

File: components\dashboard\SaveSessionModal.tsx
----------------------------------------
import React from 'react';

interface SaveModalProps {
  showSaveModal: boolean;
  newUploadName: string;
  setNewUploadName: (name: string) => void;
  closeSaveModal: () => void;
  handleSaveConfirm: () => void;
}

const SaveModal: React.FC<SaveModalProps> = ({
  showSaveModal,
  newUploadName,
  setNewUploadName,
  closeSaveModal,
  handleSaveConfirm
}) => {
  if (!showSaveModal) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-30 z-50">
      <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
        <h2 className="text-xl font-semibold mb-4 text-gray-800">Save Session</h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Session Name:
            </label>
            <input
              type="text"
              className="border border-gray-300 rounded w-full p-2 text-gray-800"
              value={newUploadName}
              onChange={(e) => setNewUploadName(e.target.value)}
              placeholder="Enter a session name..."
            />
          </div>
        </div>
        <div className="mt-6 flex justify-end space-x-2">
          <button
            onClick={closeSaveModal}
            className="bg-gray-200 text-gray-700 px-4 py-2 rounded hover:bg-gray-300"
          >
            Cancel
          </button>
          <button
            onClick={handleSaveConfirm}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
          >
            Save Session
          </button>
        </div>
      </div>
    </div>
  );
};

export default SaveModal;
----------------------------------------

File: components\dashboard\SessionNameModal.tsx
----------------------------------------
// components/dashboard/SessionNameModal.tsx
import { useState } from 'react';

export default function SessionNameModal({
  show,
  onConfirm,
  onCancel,
}: {
  show: boolean;
  onConfirm: (name: string) => void;
  onCancel: () => void;
}) {
  const [name, setName] = useState('');

  if (!show) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white p-6 rounded-lg max-w-md w-full">
        <h2 className="text-xl font-semibold mb-4 text-gray-600">Name Your Analysis Session</h2>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="w-full p-2 border rounded mb-4"
          placeholder="Session name"
        />
        <div className="flex justify-end gap-2">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded"
          >
            Cancel
          </button>
          <button
            onClick={() => onConfirm(name)}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Start Analysis
          </button>
        </div>
      </div>
    </div>
  );
}
----------------------------------------

File: components\ui\card.tsx
----------------------------------------
// components/ui/card.tsx
"use client"

import * as React from "react"

// If you have a utility for merging class names, e.g. `clsx` or a custom `cn` helper, use it here.
// Otherwise, here's a quick fallback:
function cn(...classes: (string | undefined)[]) {
  return classes.filter(Boolean).join(" ")
}

interface CardProps extends React.HTMLAttributes<HTMLDivElement> {}

// A generic Card container.
export const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "rounded-lg border bg-white text-black shadow-sm", 
          className
        )}
        {...props}
      >
        {children}
      </div>
    )
  }
)
Card.displayName = "Card"

interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}

export function CardHeader({ className, ...props }: CardHeaderProps) {
  return (
    <div
      className={cn("border-b p-4", className)}
      {...props}
    />
  )
}

interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}

export function CardTitle({ className, ...props }: CardTitleProps) {
  return (
    <h3
      className={cn("font-semibold leading-none tracking-tight", className)}
      {...props}
    />
  )
}

interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {}

export function CardContent({ className, ...props }: CardContentProps) {
  return (
    <div
      className={cn("p-4", className)}
      {...props}
    />
  )
}

----------------------------------------

File: components\ui\command.tsx
----------------------------------------
"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import clsx from "clsx"

interface CommandProps extends React.ComponentPropsWithoutRef<typeof CommandPrimitive> {
  className?: string
}

/**
 * Main Command root container with some basic styling:
 * - White background
 * - Border
 * - Rounded corners
 * - Shadow
 */
const Root = React.forwardRef<HTMLDivElement, CommandProps>(
  ({ className, ...props }, ref) => (
    <CommandPrimitive
      ref={ref}
      className={clsx(
        "relative w-full max-w-md rounded border bg-white shadow-sm", 
        "focus-within:shadow-md transition-shadow",
        className
      )}
      {...props}
    />
  )
)
Root.displayName = "Command"

/**
 * Command Input
 * - Simple text input with a bottom border
 * - Padding, text styles
 */
const Input = React.forwardRef<
  HTMLInputElement,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Input
    ref={ref}
    className={clsx(
      "w-full border-b p-2 outline-none text-sm placeholder:text-gray-400",
      "focus:outline-none",
      className
    )}
    {...props}
  />
))
Input.displayName = "CommandInput"

/**
 * Command List
 * - The container for your command items.
 */
const List = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={clsx("max-h-60 overflow-auto", className)}
    {...props}
  />
))
List.displayName = "CommandList"

/**
 * Command Empty
 * - Displayed when there are no matching items
 */
const Empty = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className={clsx(
      "p-4 text-sm text-gray-500 text-center",
      className
    )}
    {...props}
  />
))
Empty.displayName = "CommandEmpty"

/**
 * Command Group
 * - Groups command items under a heading
 */
const Group = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={clsx("p-2", className)}
    {...props}
  />
))
Group.displayName = "CommandGroup"

/**
 * Command Item
 * - Each clickable row in the command list
 */
const Item = React.forwardRef<
  HTMLDivElement,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={clsx(
      "flex w-full cursor-pointer select-none items-center rounded p-2 text-sm",
      "text-gray-700 hover:bg-gray-100 active:bg-gray-200 transition-colors",
      className
    )}
    {...props}
  >
    {children}
  </CommandPrimitive.Item>
))
Item.displayName = "CommandItem"

/**
 * Export them in the same named format your code expects:
 */
export {
  Root as Command,
  Input as CommandInput,
  List as CommandList,
  Empty as CommandEmpty,
  Group as CommandGroup,
  Item as CommandItem,
}

----------------------------------------

File: components\ui\company-facts-page.tsx
----------------------------------------
// components/ui/company-facts-page.tsx
"use client";

import React, { useState } from "react";
import dynamic from "next/dynamic";
import { Skeleton } from "@/components/ui/skeleton";

const Chart = dynamic(() => import("react-apexcharts"), { ssr: false });

// Adjust these if you have environment variables:
const BASE_URL = process.env.NEXT_PUBLIC_EXTERNAL_API_BASE_URL 
const API_TOKEN = process.env.NEXT_PUBLIC_EXTERNAL_API_TOKEN || "t3stt%40ken";

interface CompanyFacts {
  cik: number;
  entityName: string;
  facts: Record<string, Record<string, { units: Record<string, Array<{ end: string; val: number }>> }>>;
}

interface CompanyFactsPageProps {
  cik: string; // "0000320193" or similar
}

interface GeneralInfo {
  cik: string;
  ein: string;
  addresses: {
    business: {
      city: string;
      stateOrCountry: string;
      street1: string;
      street2: string | null;
      zipCode: string;
    };
    mailing: {
      city: string;
      stateOrCountry: string;
      street1: string;
      street2: string | null;
      zipCode: string;
    };
  };
  category: string;
  entityType: string;
  exchanges: string[];
  // There's also a huge "filings" object, but we skip it for brevity.
}


export function CompanyFactsPage({ cik }: CompanyFactsPageProps) {

  const [companyFacts, setCompanyFacts] = useState<CompanyFacts | null>(null);
  const [generalInfo, setGeneralInfo] = useState<GeneralInfo | null>(null);

  const [loading, setLoading] = useState(false);
  console.log("loading", loading);
  const [loadingFacts] = useState(false);
  // console log the setLoadingFacts
  const [loadingInfo, setLoadingInfo] = useState(false);
  const [selectedFactPath, setSelectedFactPath] = useState("");
  const [timeSeriesData, setTimeSeriesData] = useState<Array<{ x: string; y: number }>>([]);

  // Convert "0000320193" -> 320193
  const numericCik = parseInt(cik, 10);

  async function handleRetrieveFacts() {
    setLoading(true);
    setCompanyFacts(null);
    setTimeSeriesData([]);
    setSelectedFactPath("");

    try {
      //const url = `${BASE_URL}/company_facts?cik=${numericCik}&api_token=${API_TOKEN}`;
      const url = `/api/company-facts?cik=${numericCik}&api_token=${API_TOKEN}`;
      const res = await fetch(url);
      if (!res.ok) {
        throw new Error(`Error fetching facts: ${res.statusText}`);
      }
      const data = await res.json();
      setCompanyFacts(data);
    } catch (error) {
      console.error("Failed to retrieve facts:", error);
    } finally {
      setLoading(false);
    }
  }


    // Flatten available fact keys from the returned JSON
    function getAvailableFactKeys(): string[] {
      if (!companyFacts?.facts) return [];
      const keys: string[] = [];
      for (const [domain, factGroup] of Object.entries(companyFacts.facts)) {
        for (const factName of Object.keys(factGroup)) {
          keys.push(`${domain}/${factName}`);
        }
      }
      return keys.sort();
    }

    function handleSelectFact(path: string) {
      setSelectedFactPath(path);
      if (!companyFacts?.facts) return;
  
      // Split "dei/EntityCommonStockSharesOutstanding"
      const [domain, factName] = path.split("/");
      const factObj = companyFacts.facts[domain]?.[factName];
      if (!factObj?.units) {
        setTimeSeriesData([]);
        return;
      }
  
      // pick the first unit key or "shares"
      const unitKeys = Object.keys(factObj.units);
      if (unitKeys.length === 0) {
        setTimeSeriesData([]);
        return;
      }
      const firstUnitKey = unitKeys[0];
      const dataPoints = factObj.units[firstUnitKey] as Array<{
        end: string;
        val: number;
      }>;
  
      const chartData = dataPoints.map((dp) => ({
        x: dp.end,
        y: dp.val,
      }));
      // sort by date
      chartData.sort((a, b) => (a.x < b.x ? -1 : 1));
      setTimeSeriesData(chartData);
    }


    // -----------------------------------------
  // FETCH #2: General Info (submission_history)
  // -----------------------------------------
  async function handleRetrieveGeneralInfo() {
    setLoadingInfo(true);
    setGeneralInfo(null);

    try {
      const url = `/api/submission-history?cik=${numericCik}`;
      const res = await fetch(url);
      if (!res.ok) {
        throw new Error(`Error fetching general info: ${res.statusText}`);
      }
      const data = await res.json();
      setGeneralInfo(data);
    } catch (error) {
      console.error(error);
      alert("Error retrieving general info. Check console for details.");
    } finally {
      setLoadingInfo(false);
    }
  }

  

  return (
    <div className="p-4 bg-white rounded shadow space-y-6 text-gray-800">
      <h2 className="text-lg font-bold">
        CIK (raw): {cik} &mdash; (numeric: {numericCik})
      </h2>

      {/* Buttons */}
      <div className="flex gap-4">
        {/* Retrieve All Company Facts */}
        {!companyFacts && !loadingFacts && (
          <button
            onClick={handleRetrieveFacts}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Retrieve all Company Facts
          </button>
        )}
        {loadingFacts && <Skeleton className="h-4 w-[200px]" />}

        {/* Retrieve General Info */}
        {!generalInfo && !loadingInfo && (
          <button
            onClick={handleRetrieveGeneralInfo}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
          >
            Retrieve General Info
          </button>
        )}
        {loadingInfo && <Skeleton className="h-4 w-[200px]" />}
      </div>

      {/* General Info Display */}
      {generalInfo && (
        <div className="border p-4 rounded">
          <h3 className="font-semibold mb-2">General Info</h3>
          <p>
            <strong>CIK:</strong> {generalInfo.cik}
          </p>
          <p>
            <strong>EIN:</strong> {generalInfo.ein}
          </p>
          <p>
            <strong>Category:</strong> {generalInfo.category}
          </p>
          <p>
            <strong>Entity Type:</strong> {generalInfo.entityType}
          </p>
          <p>
            <strong>Exchanges:</strong> {generalInfo.exchanges.join(", ")}
          </p>
          <div className="mt-2">
            <strong>Business Address:</strong>
            <p>
              {generalInfo.addresses.business.street1}{" "}
              {generalInfo.addresses.business.street2} <br />
              {generalInfo.addresses.business.city},{" "}
              {generalInfo.addresses.business.stateOrCountry},{" "}
              {generalInfo.addresses.business.zipCode}
            </p>
          </div>
          <div className="mt-2">
            <strong>Mailing Address:</strong>
            <p>
              {generalInfo.addresses.mailing.street1}{" "}
              {generalInfo.addresses.mailing.street2} <br />
              {generalInfo.addresses.mailing.city},{" "}
              {generalInfo.addresses.mailing.stateOrCountry},{" "}
              {generalInfo.addresses.mailing.zipCode}
            </p>
          </div>
        </div>
      )}

      {/* Company Facts + Chart */}
      {companyFacts && (
        <div className="border p-4 rounded space-y-4">
          <p className="text-gray-600">
            <strong>Entity Name:</strong> {companyFacts.entityName}
          </p>

          {/* Fact selector */}
          <div>
            <label className="block mb-1 mt-4 font-medium text-sm">
              Select a Fact to Plot:
            </label>
            <select
              className="border rounded px-2 py-1 text-sm"
              value={selectedFactPath}
              onChange={(e) => handleSelectFact(e.target.value)}
            >
              <option value="">-- Choose --</option>
              {getAvailableFactKeys().map((k) => (
                <option key={k} value={k}>
                  {k}
                </option>
              ))}
            </select>
          </div>

          {/* Chart for the chosen fact */}
          {selectedFactPath && timeSeriesData.length > 0 && (
            <div className="mt-4">
              <h4 className="font-semibold mb-2 text-gray-700">
                Chart for: {selectedFactPath}
              </h4>
              <Chart
                type="line"
                height={300}
                series={[
                  {
                    name: selectedFactPath,
                    data: timeSeriesData,
                  },
                ]}
                options={{
                  chart: {
                    id: "factsChart",
                    toolbar: { show: false },
                  },
                  xaxis: {
                    type: "datetime",
                  },
                }}
              />
            </div>
          )}

          {selectedFactPath && timeSeriesData.length === 0 && (
            <p className="text-red-500 mt-2">
              No time-series data found for this fact.
            </p>
          )}
        </div>
      )}
    </div>
  );
}

----------------------------------------

File: components\ui\input.tsx
----------------------------------------
export function Input({ className, ...props }: React.InputHTMLAttributes<HTMLInputElement>) {
    return (
      <input
        className={`border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}
        {...props}
      />
    );
  }
----------------------------------------

File: components\ui\search-form.tsx
----------------------------------------
"use client";

import React, { useState } from "react";
import { Skeleton } from "@/components/ui/skeleton";

interface SearchFormProps {
  // You can adapt the shape as needed in your handleSearch logic
  onSearch: (params: {
    name: string;
    ticker: string;
    cik: string;
  }) => Promise<void>;
}

export function SearchForm({ onSearch }: SearchFormProps) {
  const [name, setName] = useState("");
  const [ticker, setTicker] = useState("");
  const [cik, setCik] = useState("");
  const [loading, setLoading] = useState(false);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    console.log("Form submitted"); // <-- Debug log
    setLoading(true);
    try {
      await onSearch({ name, ticker, cik });
    } catch (error) {
      console.error("Search error:", error);
    } finally {
      setLoading(false);
    }
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="space-y-4 bg-white p-4 rounded shadow-sm"
    >
      {/* Name Field */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Name
        </label>
        <input
          type="text"
          placeholder="e.g. Apple Inc"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="mt-1 block w-full border-gray-300 rounded-md
                     shadow-sm focus:border-blue-500 focus:ring-blue-500
                     text-sm px-3 py-2 text-gray-900"
        />
      </div>

      {/* Ticker Field */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Ticker
        </label>
        <input
          type="text"
          placeholder="e.g. AAPL"
          value={ticker}
          onChange={(e) => setTicker(e.target.value)}
          className="mt-1 block w-full border-gray-300 rounded-md
                     shadow-sm focus:border-blue-500 focus:ring-blue-500
                     text-sm px-3 py-2 text-gray-900"
        />
      </div>

      {/* CIK Field */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          CIK
        </label>
        <input
          type="text"
          placeholder="e.g. 0000320193"
          value={cik}
          onChange={(e) => setCik(e.target.value)}
          className="mt-1 block w-full border-gray-300 rounded-md
                     shadow-sm focus:border-blue-500 focus:ring-blue-500
                     text-sm px-3 py-2"
        />
      </div>

      {/* Search Button */}
      <div className="text-right">
        <button
          type="submit"
          className="inline-flex items-center px-4 py-2
                     bg-blue-600 text-white rounded
                     hover:bg-blue-700 text-sm font-medium
                     focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Search
        </button>
      </div>

      {/* Loading Indicator */}
      {loading && (
        <div className="pt-2">
          <Skeleton className="h-4 w-full" />
        </div>
      )}
    </form>
  );
}

----------------------------------------

File: components\ui\search-input.tsx
----------------------------------------
// components/ui/search-input.tsx
"use client";

import { useState, useCallback, useEffect } from 'react';
import React from 'react';
import { Command, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem } from '@/components/ui/command';
import { debounce } from 'lodash';
import { Skeleton } from '@/components/ui/skeleton';
interface SearchInputProps {
  onSearch: (company: { cik: string; searchTerm: string; name: string; tickers?: string[] }) => void;
}

export function SearchInput({ onSearch }: SearchInputProps) {
  const [query, setQuery] = useState('');
  const [suggestions, setSuggestions] = useState<{ cik: string; searchTerm: string; name: string; tickers?: string[] }[]>([]);
  const [loading, setLoading] = useState(false);

  const fetchSuggestions = useCallback(async (searchQuery: string) => {
    try {
      const response = await fetch(`/api/search?query=${encodeURIComponent(searchQuery)}`);
      const data = await response.json();
      setSuggestions(data);
    } catch (error) {
      console.error('Error fetching suggestions:', error);
    } finally {
      setLoading(false);
    }
  }, []);

  const debouncedFetchSuggestions = useCallback((searchQuery: string) => {
    debounce(() => fetchSuggestions(searchQuery), 300)();
  }, [fetchSuggestions]);

  useEffect(() => {
    if (query.length > 0) {
      debouncedFetchSuggestions(query);
      setLoading(true);
      fetchSuggestions(query);
    } else {
      setSuggestions([]);
    }
  }, [query, fetchSuggestions, debouncedFetchSuggestions]);

  return (
    <div className="w-full max-w-2xl mx-auto text-gray-600">
      <Command shouldFilter={false}>
        <CommandInput
          placeholder="Search company by name, CIK, or ticker..."
          value={query}
          onValueChange={setQuery}
        />
        {loading && <div className="p-2"><Skeleton className="h-4 w-full" /></div>}
        <CommandList>
          {suggestions.length > 0 && (
            <CommandGroup heading="Suggestions">
              {suggestions.map((company) => (
                <CommandItem
                  key={company.cik}
                  value={company.cik}
                  onSelect={() => {
                    setQuery(company.searchTerm);
                    onSearch(company);
                    setSuggestions([]);
                  }}
                  className="cursor-pointer"
                >
                  <div className="flex flex-col">
                    <span className="font-medium">{company.name}</span>
                    <div className="flex gap-2 text-sm text-muted-foreground">
                      {company.tickers?.map(t => <span key={t}>Ticker: {t}</span>)}
                      <span>CIK: {company.cik.padStart(10, '0')}</span>
                    </div>
                  </div>
                </CommandItem>
              ))}
            </CommandGroup>
          )}
          {!loading && suggestions.length === 0 && query.length > 1 && (
            <CommandEmpty>No results found.</CommandEmpty>
          )}
        </CommandList>
      </Command>
    </div>
  );
}
----------------------------------------

File: components\ui\search-results.tsx
----------------------------------------
// components/ui/search-results.tsx
"use client";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

interface Company {
  cik: string;
  name: string;
  tickers?: string[];
}

interface SearchResultsProps {
  results: Company[];
}

export function SearchResults({ results }: SearchResultsProps) {
  const router = useRouter();
  return (
    <div className="grid gap-4 mt-8">
      {results.map((company) => (
        <Card key={company.cik} className="hover:shadow-lg transition-shadow">
          <CardHeader>
            <CardTitle className="text-xl">{company.name}</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex gap-4 text-muted-foreground">
              <div>
                <p className="text-sm">CIK: {company.cik.padStart(10, '0')}</p>
                {(company.tickers?.length ?? 0) > 0 && (
                  <p className="text-sm">Tickers: {company.tickers?.join(', ')}</p>
                )}
                  <button
              onClick={() => router.push(`/data/${company.cik}`)}
              className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700"
            >
              View Facts
            </button>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
----------------------------------------

File: components\ui\skeleton.tsx
----------------------------------------
// components/ui/skeleton.tsx

import * as React from "react"
import { cn } from "../../lib/utils" // or wherever your cn (classNames) helper is

export function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn(
        "animate-pulse rounded-md bg-gray-200", 
        className
      )}
      {...props}
    />
  )
}

----------------------------------------

File: components\ui\spinner.tsx
----------------------------------------
export function Spinner({ className }: { className?: string }) {
    return (
      <svg
        className={`animate-spin h-5 w-5 text-current ${className}`}
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
      >
        <circle
          className="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          strokeWidth="4"
        ></circle>
        <path
          className="opacity-75"
          fill="currentColor"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        ></path>
      </svg>
    );
  }
----------------------------------------

