File: app/history\page.tsx
----------------------------------------
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { TrashIcon } from '@heroicons/react/24/outline';
import Navbar from '@/components/Navbar';

export interface SessionSummary {
  session_id: number;
  session_name: string;
  created_at: string;
  file_count: number;
}

export default function HistoryPage() {
  const router = useRouter();
  const [sessions, setSessions] = useState<SessionSummary[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Fetch user sessions on mount
  useEffect(() => {
    const userId = localStorage.getItem('userId');
    if (!userId) {
      // Not logged in
      router.push('/login');
      return;
    }

    fetch('/api/sessions', {
      headers: { 'x-user-id': userId }
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.error) {
          setError(data.error);
          return;
        }
        setSessions(data.sessions || []);
      })
      .catch((err) => {
        setError(err.message || 'Error fetching sessions');
      })
      .finally(() => {
        setLoading(false);
      });
  }, [router]);

  // Delete a session
  async function handleDeleteSession(sessionId: number) {
    const userId = localStorage.getItem('userId') || '';
     // First confirmation:
    if (!confirm('Are you sure you want to delete this session?')) return;
    // Second confirmation:
    if (!confirm('This action is permanent and cannot be undone. Continue?')) return;


    try {
      const res = await fetch(`/api/sessions/${sessionId}`, {
        method: 'DELETE',
        headers: { 'x-user-id': userId }
      });
      if (!res.ok) {
        const d = await res.json();
        throw new Error(d.error || 'Failed to delete session');
      }

      // Remove it from local state
      setSessions((prev) => prev.filter((s) => s.session_id !== sessionId));
    } catch (err: unknown) {
      if (err instanceof Error) {
        alert('Error deleting session: ' + err.message);
      } else {
        alert('Error deleting session');
      }
      console.error(err);
    }
  }

  if (loading) {
    return <div className="p-4">Loading sessions...</div>;
  }

  if (error) {
    return <div className="p-4 text-red-600">Error: {error}</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      <main className="max-w-4xl mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold mb-6 text-gray-800">Your Sessions</h1>
        {sessions.length === 0 ? (
          <p>No sessions found.</p>
        ) : (
          <ul className="space-y-4">
            {sessions.map((session) => (
              <li key={session.session_id} className="border p-4 rounded bg-white flex justify-between">
                <div>
                  <h2 className="text-lg font-semibold text-gray-600">
                    {session.session_name}
                  </h2>
                  <p className="text-sm text-gray-600">
                    Created: {new Date(session.created_at).toLocaleString()}
                  </p>
                  <p className="text-sm text-gray-600">
                    Files: {session.file_count}
                  </p>
                </div>
                <div className="flex items-center gap-2">
                  {/* View Details */}
                  <button
                    onClick={() => router.push(`/history/${session.session_id}`)}
                    className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700"
                  >
                    View Details
                  </button>

                  {/* Trash Icon => Delete Session */}
                  <button
                    onClick={() => handleDeleteSession(session.session_id)}
                    className="p-2 hover:bg-red-50 rounded"
                    title="Delete Session"
                  >
                    <TrashIcon className="w-5 h-5 text-red-600" />
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}
      </main>
    </div>
  );
}

----------------------------------------

File: app/history\[sessionId]\page.tsx
----------------------------------------
// app/history/[sessionId]/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useParams } from 'next/navigation';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import ReactJson from 'react-json-view';
import * as XLSX from 'xlsx';
import { FileNode } from '@/components/FileTree';

// Define the structure of the session data stored in the database.
export interface SessionData {
  session_name: string;
  fileTree?: FileNode[];
  // You can add other properties (extractedTexts, summaries, chatHistory, etc.) here
  [key: string]: unknown;
}

// Define the session structure returned by your API.
export interface Session {
  session_data: SessionData;
  created_at: string;
  file_count: number;
}

// A helper function to recursively extract Excel files from the file tree.
const getExcelFiles = (nodes: FileNode[]): FileNode[] => {
  let files: FileNode[] = [];
  nodes.forEach((node) => {
    if (node.type === 'file' && /\.(xlsx|xls)$/i.test(node.name)) {
      files.push(node);
    }
    if (node.children && node.children.length > 0) {
      files = files.concat(getExcelFiles(node.children));
    }
  });
  return files;
};

// Component to preview an Excel file node.
const ExcelPreview: React.FC<{ node: FileNode }> = ({ node }) => {
  const [tableData, setTableData] = useState<string[][]>([]);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    const parseExcel = async () => {
      if (!node.base64Data) {
        setError('No data available');
        return;
      }
      try {
        // Decode the base64 string into a binary string.
        const binaryStr = atob(node.base64Data);
        const len = binaryStr.length;
        const bytes = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
          bytes[i] = binaryStr.charCodeAt(i);
        }
        // Parse the workbook using XLSX.
        const workbook = XLSX.read(bytes, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
        // Convert the sheet to an array-of-arrays (each row is an array).
        const data: (string | number | boolean | null)[][] = XLSX.utils.sheet_to_json<(string | number | boolean | null)[]>(sheet, { header: 1 });
        const stringData: string[][] = data.map(row => row.map(cell => cell !== null ? cell.toString() : ''));
        setTableData(stringData);
      } catch {
        setError('Error parsing Excel file');
      }
    };

    parseExcel();
  }, [node.base64Data]);

  return (
    <div className="mb-4">
      <h3 className="font-semibold text-gray-800">{node.name}</h3>
      {error ? (
        <p className="text-red-600">{error}</p>
      ) : tableData.length > 0 ? (
        <div className="overflow-x-auto">
          <table className="min-w-full border border-gray-300">
            <tbody>
              {tableData.slice(0, 10).map((row, rowIndex) => (
                <tr key={rowIndex} className="border-b border-gray-200">
                  {row.map((cell, cellIndex) => (
                    <td
                      key={cellIndex}
                      className="px-2 py-1 border-r border-gray-200 text-gray-800"
                    >
                      {cell !== undefined ? cell.toString() : ''}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
          {tableData.length > 10 && (
            <p className="text-sm text-gray-600 mt-2">Showing first 10 rows</p>
          )}
        </div>
      ) : (
        <p className="text-gray-800">No data to preview</p>
      )}
    </div>
  );
};

const SessionDetail: React.FC = () => {
  const { sessionId } = useParams();
  const [session, setSession] = useState<Session | null>(null);
  const [error, setError] = useState<string>('');

// Add this useEffect to fetch heavy data when the component mounts
useEffect(() => {

  const userId = localStorage.getItem('userId');
  if (!userId || !sessionId) return;

  const fetchHeavyData = async () => {
    try {
      const res = await fetch(`/api/store-heavy-data?sessionId=${sessionId}`);
      if (!res.ok) throw new Error('Failed to fetch heavy data');
      const heavyData = await res.json();
      // Merge heavy data into session data
      setSession(prev => prev ? {
        ...prev,
        session_data: {
          ...prev.session_data,
          extractedTexts: heavyData.extractedTexts,
          summaries: heavyData.summaries
        }
      } : null);
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('An unknown error occurred');
      }
    }
  };

  async function fetchSession() {
    try {
      // 1) Minimal session info from the DB
      const sessRes = await fetch(`/api/sessions/${sessionId}`, {
        headers: { 'x-user-id': userId || '' },
      });
      if (!sessRes.ok) throw new Error('Failed to fetch session');
      const sessJson = await sessRes.json();
      // sessJson is { session: { session_id, session_name, created_at, ... } }

      // 2) Heavy data from local file
      const heavyRes = await fetch(`/api/store-heavy-data?sessionId=${sessionId}`);
      // If heavy data doesnâ€™t exist, it might be 404. You can handle that gracefully.
      if (!heavyRes.ok) {
        console.warn('No heavy data found (maybe not uploaded yet).');
      }
      const heavyJson = heavyRes.ok ? await heavyRes.json() : {};

      // 3) Merge them together
      // Suppose your DB session JSON doesn't store `session_data` by default.
      // You can create a structure that includes fileTree, chatHistory, etc.
      setSession({
        // For example, you can store them like:
        session_data: {
          session_name: sessJson.session.session_name,
          fileTree: heavyJson.extractedTexts ? [] : [], // or reconstruct if you wish
          // Or you can do more advanced merges if you have them
          extractedTexts: heavyJson.extractedTexts || {},
          summaries: heavyJson.summaries || {},
        },
        created_at: sessJson.session.created_at,
        file_count: sessJson.session.file_count || 0,
      });
    } catch (err) {
      console.error('Error fetching session details:', err);
      setError(err instanceof Error ? err.message : 'Unknown error');
    }
  }

  if (sessionId) {
    fetchSession();
    fetchHeavyData();
  }
}, [sessionId]);

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col">
        <Navbar />
        <main className="max-w-7xl mx-auto px-4 py-8 flex-grow text-gray-800">
          <p className="text-red-600">{error}</p>
        </main>
        <Footer />
      </div>
    );
  }

  if (!session) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col">
        <Navbar />
        <main className="max-w-7xl mx-auto px-4 py-8 flex-grow text-gray-800">
          <p>Loading session details...</p>
        </main>
        <Footer />
      </div>
    );
  }

  // Extract Excel files (if any) from the file tree stored in session_data.
  const excelFiles: FileNode[] = session.session_data.fileTree
    ? getExcelFiles(session.session_data.fileTree)
    : [];

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Navbar />
      <main className="max-w-7xl mx-auto px-4 py-8 flex-grow text-gray-800">
        <h1 className="text-2xl font-bold mb-6">Session Details</h1>
        <div className="mb-4">
          <p>
            <strong>Name:</strong>{' '}
            {session.session_data.session_name || 'Untitled Session'}
          </p>
          <p>
            <strong>Created:</strong>{' '}
            {new Date(session.created_at).toLocaleString()}
          </p>
          <p>
            <strong>Files Count:</strong> {session.file_count}
          </p>
        </div>

        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-2">Session Data</h2>
          {/* A scrollable, collapsible JSON viewer */}
          <div className="max-h-96 overflow-y-auto bg-gray-100 p-4 rounded">
            <ReactJson
              src={session.session_data}
              theme="rjv-default"
              collapsed={2}
              displayDataTypes={false}
              style={{ fontSize: '0.875rem' }}
            />
          </div>
        </div>

        {excelFiles.length > 0 && (
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Excel Files Preview</h2>
            {excelFiles.map((file, index) => (
              <ExcelPreview key={index} node={file} />
            ))}
          </div>
        )}
      </main>
      <Footer />
    </div>
  );
};

export default SessionDetail;

----------------------------------------

File: app/api/sessions\route.tsx
----------------------------------------
// app/api/sessions/route.tsx
import { NextResponse } from 'next/server';
import pool from '../../../utils/db';
// app/api/sessions/route.tsx
export async function GET(request: Request) {
  const client = await pool.connect();
  try {
    const userId = request.headers.get('x-user-id');
    if (!userId || isNaN(parseInt(userId))) { // Add numeric validation
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
  

    const result = await client.query(`
      SELECT 
        s.session_id,
        s.session_name,
        s.created_at,
        (SELECT COUNT(*)::int FROM files f WHERE f.session_id = s.session_id) AS file_count
      FROM sessions s
      WHERE s.user_id = $1
      ORDER BY s.created_at DESC
    `, [userId]);


    
    const sessions = result.rows.map((row) => ({
      session_id: row.session_id,
      session_name: row.session_name,
      created_at: row.created_at,
      file_count: row.file_count
    }));

    return NextResponse.json({ sessions });
  } catch (error) {
    console.error('Session load error:', error);
    //alert(error);
    return NextResponse.json({ error: 'Failed to load sessions' }, { status: 500 });
  } finally {
    client.release();
  }
}



export async function POST(request: Request) {
  const client = await pool.connect();
  await client.query('BEGIN');
  try {
    const userId = request.headers.get('x-user-id');
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { sessionName } = await request.json();


    //columns  session_id | user_id | session_name | created_at | expires_at
    const result = await client.query(`
      INSERT INTO sessions (user_id, session_name)
      VALUES ($1, $2)
      RETURNING session_id, created_at
    `, [userId, sessionName]);

   
    const sessionId = result.rows[0].session_id;

    await client.query('COMMIT');
    return NextResponse.json({
      success: true,
      session_id: sessionId,
      created_at: result.rows[0].created_at
    });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Session save error:', error);
    return NextResponse.json({ error: 'Failed to save session' }, { status: 500 });
  } finally {
    client.release();
  }
}
----------------------------------------

File: app/api/sessions\[sessionId]\route.tsx
----------------------------------------
// app/api/sessions/[sessionId]/route.tsx
import { NextResponse } from 'next/server';
import pool from '@/utils/db';
import fs from 'fs';
import path from 'path';

export async function GET(
  request: Request,
  { params }: { params: { sessionId: string } }
) {
  const client = await pool.connect();
  try {
    const userId = request.headers.get('x-user-id');
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    const sId = parseInt(params.sessionId, 10);
    if (isNaN(sId)) {
      return NextResponse.json({ error: 'Invalid session ID' }, { status: 400 });
    }

    const res = await client.query(
      `SELECT session_id, session_name, created_at
         FROM sessions
        WHERE session_id = $1 AND user_id = $2`,
      [sId, userId]
    );
    if (res.rowCount === 0) {
      return NextResponse.json({ error: 'Session not found' }, { status: 404 });
    }
    const session = res.rows[0];
    return NextResponse.json({ session });
  } catch (error) {
    console.error('Error fetching session:', error);
    return NextResponse.json({ error: 'Error fetching session' }, { status: 500 });
  } finally {
    client.release();
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { sessionId: string } }
) {
  const client = await pool.connect();
  await client.query('BEGIN');
  try {
    const userId = request.headers.get('x-user-id');
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    const sId = parseInt(params.sessionId, 10);
    if (isNaN(sId)) {
      return NextResponse.json({ error: 'Invalid session ID' }, { status: 400 });
    }
    // Optionally, remove the session reference from files (set session_id to NULL)
    await client.query(
      `UPDATE files SET session_id = NULL WHERE session_id = $1 AND user_id = $2`,
      [sId, userId]
    );
    const deleteResult = await client.query(
      `DELETE FROM sessions WHERE session_id = $1 AND user_id = $2`,
      [sId, userId]
    );
    if (deleteResult.rowCount === 0) {
      // Nothing to delete or unauthorized
      await client.query('ROLLBACK');
      return NextResponse.json(
        { error: 'Session not found or not authorized' },
        { status: 404 }
      );
    }

    await client.query('COMMIT');

     // 3) Remove the session folder from disk (best-effort)
    // data/<sessionId> is the folder holding heavyData.json + /files
    const sessionPath = path.join(process.cwd(), 'data', String(sId));
    try {
      // Node 14 and below do not support fs.rmSync, so if you need older Node, use rmdirSync.
      fs.rmSync(sessionPath, { recursive: true, force: true });
      console.log(`Deleted directory: ${sessionPath}`);
    } catch (err) {
      // Not critical if folder removal fails â€“ but we log it.
      console.error(`Failed to remove folder ${sessionPath}:`, err);
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Error deleting session:', error);
    return NextResponse.json({ error: 'Error deleting session' }, { status: 500 });
  } finally {
    client.release();
  }
}

----------------------------------------

File: app/api/session-file\route.tsx
----------------------------------------
import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import mime from 'mime'; // install via `npm install mime` if you want to do more robust MIME detection

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('sessionId');
    const filePath = searchParams.get('filePath');

    if (!sessionId || !filePath) {
      return NextResponse.json(
        { error: 'Missing sessionId or filePath' },
        { status: 400 }
      );
    }

    // Construct the absolute path on disk
    const absolutePath = path.join(
      process.cwd(),
      'data',
      sessionId,
      decodeURIComponent(filePath) // Add URI decoding
    );

    console.log('Serving file:', absolutePath);

    if (!fs.existsSync(absolutePath)) {
      return NextResponse.json({ error: 'File not found' }, { status: 404 });
    }

    // Read file from disk
    const fileBuffer = fs.readFileSync(absolutePath);

    // Infer MIME type from the filename extension, or fall back to octet-stream
    const mimeType = mime.getType(absolutePath) || 'application/octet-stream';

    const headers = {
      'Content-Type': mimeType,
      'Content-Disposition': `inline; filename="${path.basename(absolutePath)}"`,
    };
    // Add proper PDF content disposition
    if (mimeType === 'application/pdf') {
      headers['Content-Disposition'] = `inline; filename="${path.basename(absolutePath)}"`;
    } else {
      headers['Content-Disposition'] = `attachment; filename="${path.basename(absolutePath)}"`;
    }

    // Return the file bytes in the response
    return new NextResponse(fileBuffer, {
      headers: headers,
    });
  } catch (error) {
    console.error('Error serving file:', error);
    return NextResponse.json({ error: 'File serving error' }, { status: 500 });
  }
}

----------------------------------------

