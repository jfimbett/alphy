I am developing a Next.js application for private equity funds to be able to upload documents and have them
analyzed using Large Language Models. The application allows for signup/login, and some persistence of user data.
The application is built mostly using typescript, and uses a local postgres database for storing data, as well as some local storage 
in the folder of the application for large data. A normal workflow for a user is to upload a folder with documents, 
select the documents that the users wants analyzed, then the LLM first summarizes the document, then it identifies key variablesto extract, then
it extracts that information, and finally there is a consolidation step because it can happen that the same company 
appears in different documents. 

I need your help with the following things

1. The consolidation is not working for some files, eventhough the json response clearly shows that there is information. 
For example, when I analyze a file in companies/page.tsx I see this information in the raw json
CHUNK 1 RESPONSE]
[]

[CHUNK 2 RESPONSE]
{
  "companies": [
    {
      "name": "REMARKABLE HOLDING AS",
      "type": "company",
      "variables": {
        "operating_income": {
          "2020": {
            "value": "-552 285",
            "currency": "NOK"
          },
          "2019": {
            "value": "-777 521",
            "currency": "NOK"
          }
        },
        "net_finance": {
          "2020": {
            "value": "690 065",
            "currency": "NOK"
          },
          "2019": {
            "value": "616 587",
            "currency": "NOK"
          }
        },
        "ordinary_result_before_tax": {
          "2020": {
            "value": "137 780",
            "currency": "NOK"
          },
          "2019": {
            "value": "-160 934",
            "currency": "NOK"
          }
        },
        "ordinary_result_after_tax": {
          "2020": {
            "value": "107 469",
            "currency": "NOK"
          },
          "2019": {
            "value": "-125 529",
            "currency": "NOK"
          }
        },
        "annual_result": {
          "2020": {
            "value": "107 469",
            "currency": "NOK"
          },
          "2019": {
            "value": "-125 529",
            "currency": "NOK"
          }
        },
        "total_assets": {
          "2020": {
            "value": "205 722 164",
            "currency": "NOK"
          },
          "2019": {
            "value": "191 797 845",
            "currency": "NOK"
          }
        },
        "total_equity": {
          "2020": {
            "value": "205 548 733",
            "currency": "NOK"
          },
          "2019": {
            "value": "191 253 920",
            "currency": "NOK"
          }
        },
        "total_liabilities": {
          "2020": {
            "value": "173 431",
            "currency": "NOK"
          },
          "2019": {
            "value": "543 925",
            "currency": "NOK"
          }
        }
      }
    }
  ]
}

but I see no vriables being displayed.

Here is the file structure of the project

|-- .env.local
|-- .gitignore
|-- README.md
|-- TODO.md
|-- eslint.config.mjs
|-- next-env.d.ts
|-- next.config.ts
|-- package.json
|-- pnpm-lock.yaml
|-- postcss.config.mjs
|-- prompt.py
|-- prompt.txt
|-- starting_prompt.txt
|-- tailwind.config.ts
|-- tsconfig.json
|-- .vscode
  |-- launch.json
|-- db
  |-- reset.sql
  |-- schema.sql
  |-- sec_financial_data.sql
  |-- testdata.sql
|-- lib
  |-- modelConfig.ts
  |-- prompts.ts
  |-- utils.tsx
|-- logs
  |-- debug-responses.jsonl
  |-- llm-logs.txt
|-- scripts
  |-- sync-data.ts
  |-- tsconfig_local.txt
|-- types
  |-- encoder.d.ts
|-- utils
  |-- db.tsx
  |-- localLLMs.tsx
|-- components
  |-- AlphyAnimation.tsx
  |-- AnalysisPreview.tsx
  |-- ChatMessage.tsx
  |-- CompanyInfoComponent.tsx
  |-- CompanySearch.tsx
  |-- ExtractedTextComponent.tsx
  |-- FileTree.tsx
  |-- FileUploader.tsx
  |-- Footer.tsx
  |-- Navbar.tsx
  |-- SummaryContent.tsx
  |-- TestimonialsSlider.tsx
  |-- dashboard
    |-- ChatSection.tsx
    |-- FileAnalysisProgress.tsx
    |-- FilePreviewSection.tsx
    |-- FileUploadArea.tsx
    |-- LoadSessionModal.tsx
    |-- ModelSelector.tsx
    |-- RadioButtons.tsx
    |-- SaveSessionModal.tsx
    |-- SessionNameModal.tsx
  |-- ui
    |-- card.tsx
    |-- command.tsx
    |-- company-facts-page.tsx
    |-- input.tsx
    |-- search-form.tsx
    |-- search-input.tsx
    |-- search-results.tsx
    |-- skeleton.tsx
    |-- spinner.tsx
|-- public
  |-- file.svg
  |-- globe.svg
  |-- next.svg
  |-- pdf.worker.mjs
  |-- vercel.svg
  |-- window.svg
  |-- images
    |-- testimonial-1.jpg
    |-- testimonial-2.jpg
    |-- testimonial-3.jpg
|-- app
  |-- favicon.ico
  |-- globals.css
  |-- layout.tsx
  |-- page.tsx
  |-- types.ts
  |-- companies
    |-- page.tsx
  |-- data-aggregated
    |-- page.tsx
  |-- settings
    |-- page.tsx
  |-- login
    |-- page.tsx
  |-- signup
    |-- page.tsx
  |-- dashboard
    |-- page.tsx
    |-- useChat.tsx
    |-- utils
      |-- utils.tsx
  |-- data
    |-- page.tsx
    |-- [cik]
      |-- page.tsx
  |-- history
    |-- page.tsx
    |-- [sessionId]
      |-- page.tsx
  |-- api
    |-- all-accounts
      |-- route.tsx
    |-- account-data
      |-- route.tsx
    |-- company-facts
      |-- route.tsx
    |-- countTokens
      |-- route.tsx
    |-- financial-data
      |-- route.tsx
    |-- api-keys
      |-- route.ts
    |-- companies
      |-- route.ts
    |-- llm
      |-- route.tsx
    |-- session-file
      |-- route.tsx
    |-- search
      |-- route.tsx
    |-- submission-history
      |-- route.tsx
    |-- store-heavy-data
      |-- route.tsx
    |-- test
      |-- route.tsx
    |-- auth
      |-- login
        |-- route.tsx
      |-- signup
        |-- route.tsx
    |-- files
      |-- route.tsx
      |-- [fileId]
        |-- route.tsx
    |-- sessions
      |-- route.tsx
      |-- [sessionId]
        |-- route.tsx
    |-- uploads
      |-- route.tsx
      |-- [uploadId]
        |-- route.tsx


plus some other standard files in a Next.js project.

Always return the code in a clear manner, commented, and using best practices. If you cannot return the entire code at least return the entire function where the code is being modified.

Here are the files you need 

{insert files here}
