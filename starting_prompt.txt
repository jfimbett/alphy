I am developing a Next.js application for private equity funds to be able to upload documents and have them
analyzed using Large Language Models. The application allows for signup/login, and some persistence of user data.
The application is built mostly using typescript, and uses a local postgres database for storing data, as well as some local storage 
in the folder of the application for large data. A normal workflow for a user is to upload a folder with documents, 
select the documents that the users wants analyzed, then the LLM first summarizes the document, then it identifies key variablesto extract, then
it extracts that information, and finally there is a consolidation step because it can happen that the same company 
appears in different documents. 

I need your help with the following things

1. The data that is displayed in /companies/page.tsx I need it to be stored somehow. You can decide if either as  json (which makes sense since we can already see the json raw data) or as you think its more convenient. 
The reason for this is that this data needs to be also accessed through an API, so the user after having this in the website can also accessed that data through an API for his own applications. 
In order for the server to know the user requesting the data, I need in the settings page to have an API key for this. 
2. There might be a lot of json raw files being nicely displayed in companies/page.tsx, so I need the option to press a button next to every number being displayed
and this automatically will copy to the clipboard the exact url required to access that information through the API.

Here is the file structure of the project

|-- favicon.ico
|-- globals.css
|-- layout.tsx
|-- page.tsx
|-- types.ts
|-- data-aggregated
  |-- page.tsx
|-- companies
  |-- page.tsx
|-- settings
  |-- page.tsx
|-- login
  |-- page.tsx
|-- signup
  |-- page.tsx
|-- history
  |-- page.tsx
  |-- [sessionId]
    |-- page.tsx
|-- data
  |-- page.tsx
  |-- [cik]
    |-- page.tsx
|-- dashboard
  |-- page.tsx
  |-- useChat.tsx
  |-- utils
    |-- utils.tsx
|-- api
  |-- company-facts
    |-- route.tsx
  |-- account-data
    |-- route.tsx
  |-- all-accounts
    |-- route.tsx
  |-- financial-data
    |-- route.tsx
  |-- countTokens
    |-- route.tsx
  |-- llm
    |-- route.tsx
  |-- store-heavy-data
    |-- route.tsx
  |-- submission-history
    |-- route.tsx
  |-- search
    |-- route.tsx
  |-- session-file
    |-- route.tsx
  |-- test
    |-- route.tsx
  |-- files
    |-- route.tsx
    |-- [fileId]
      |-- route.tsx
  |-- auth
    |-- signup
      |-- route.tsx
    |-- login
      |-- route.tsx
  |-- sessions
    |-- route.tsx
    |-- [sessionId]
      |-- route.tsx
  |-- uploads
    |-- route.tsx
    |-- [uploadId]
      |-- route.tsx
|-- AlphyAnimation.tsx
|-- AnalysisPreview.tsx
|-- ChatMessage.tsx
|-- CompanyInfoComponent.tsx
|-- CompanySearch.tsx
|-- ExtractedTextComponent.tsx
|-- FileTree.tsx
|-- FileUploader.tsx
|-- Footer.tsx
|-- Navbar.tsx
|-- SummaryContent.tsx
|-- TestimonialsSlider.tsx
|-- dashboard
  |-- ChatSection.tsx
  |-- FileAnalysisProgress.tsx
  |-- FilePreviewSection.tsx
  |-- FileUploadArea.tsx
  |-- LoadSessionModal.tsx
  |-- ModelSelector.tsx
  |-- RadioButtons.tsx
  |-- SaveSessionModal.tsx
  |-- SessionNameModal.tsx
|-- ui
  |-- card.tsx
  |-- command.tsx
  |-- company-facts-page.tsx
  |-- input.tsx
  |-- search-form.tsx
  |-- search-input.tsx
  |-- search-results.tsx
  |-- skeleton.tsx
  |-- spinner.tsx


plus some other standard files in a Next.js project.

Always return the code in a clear manner, commented, and using best practices. If you are not returning the entire code of 
the file you need to be extremely clear where I should incorporate that code. 

Here are the files you need 

{insert files here}
